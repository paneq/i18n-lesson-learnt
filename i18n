i18n - lesson (painfully) learnt
================================
:author:    Robert Pankowecki
:copyright: Robert Pankowecki
:backend:   slidy
:max-width: 45em
:data-uri:
:icons:
:language: ruby
:pygments:


Robert Pankowecki ???
---------------------

image:/home/rupert/Dropbox/drug/wroclawrb/logos/drug-logo-name-rect-sq.png[]
image:/home/rupert/Dropbox/drug/wroclawrb/krasnal.png[]
image:/home/rupert/Dropbox/drug/arkency.png[]
image:/home/rupert/Dropbox/Photos/rupert_outside_bw.jpg[]

* github:  @paneq
* twitter: @pankowecki
* gtalk:   robert.pankowecki
* cv:      robert.pankowecki.pl
* blog:    blog.robert.pankowecki.pl
* company: rails.arkency.com
* conference: wrocloverb.com


== Requirements

* multiple deploys
* easy to change per deploy
* customers have different naming conventions
* words often repeated
* writing framework actually


== HATE_MODE_ON

* Seriously :)

== I18n - kinda sucks ??

* There is no place to say that word "X" means "Y"
* Yep!

[source]
---------------------------------------------------------------------------------
Author.model_name.human
Comment.human_attribute_name(:author)
---------------------------------------------------------------------------------

* returns "author" in english
* requires 2 translations for every other language
* still 2 if you want use en < - > en translation and prefer "Writer" insted of "Author"


== Problem: I18n (Solution)

* scope: humanize.*
* more about it later

== Usecase: Sentence on the view page

* ActionView::Helpers::TranslationHelper#translate
* t

[source]
---------------------------------------------------------------------------------
# app/views/books/index.html.erb
t("matz_is_nice_so_be_nice_but_still_constructive")
---------------------------------------------------------------------------------

* No namespacing? What is it? PHP?

== Usecase: Sentence on the view page (dot operator)

[source]
---------------------------------------------------------------------------------
# app/views/books/index.html.erb
t(".matz_is_nice_so_be_nice_but_still_constructive")
---------------------------------------------------------------------------------

[source]
---------------------------------------------------------------------------------
pl:
  books:
    index:
      matz_is_nice_so_be_nice_but_still_constructive: "Konstruktywny feedback zawsze mile widziany"
---------------------------------------------------------------------------------

* Sentences are not widely repreated across application (IMHO)
* No need to optimize

== Usecase: Sentence on the view page (use "sentence" namespace)

[source]
---------------------------------------------------------------------------------
# app/views/books/index.html.erb
t(".sentence.matz_is_nice_so_be_nice_but_still_constructive")
---------------------------------------------------------------------------------

[source, text]
---------------------------------------------------------------------------------
pl:
  books:
    index:
      sentence:
        matz_is_nice_so_be_nice_but_still_constructive: "Konstruktywny feedback zawsze mile widziany"
---------------------------------------------------------------------------------

== Usecase: Sentence on the view page (ss)

* scoped_sentence
* ss

[source]
---------------------------------------------------------------------------------
# app/views/books/index.html.erb
ss("matz_is_nice_so_be_nice_but_still_constructive")
#t(".sentence.matz_is_nice_so_be_nice_but_still_constructive")
---------------------------------------------------------------------------------

== Usecase: Single word on view page

[source]
---------------------------------------------------------------------------------
t("navigation")
t("actions")
---------------------------------------------------------------------------------

* again, flat structure?
* DHH: X > 13 => chaos

== Usecase: Single word on view page (humanize)

[source]
---------------------------------------------------------------------------------
t("humanize.navigation")
t("humanize.actions")
---------------------------------------------------------------------------------

* at least a namespace
* require to change source of the page if needed to translate differently on
  different page


== Usecase: Single word on view page (dot)

[source]
---------------------------------------------------------------------------------
# app/views/books/index.html.erb
t(".navigation")
---------------------------------------------------------------------------------

[source]
---------------------------------------------------------------------------------
# app/views/author/new.html.erb
t(".navigation")
---------------------------------------------------------------------------------

* can be translated differently on different pages
* lack of default


== Usecase: Single word on view page (default)

[source]
---------------------------------------------------------------------------------
# app/views/books/index.html.erb
t(".navigation", :default => "humanize.navigation")
---------------------------------------------------------------------------------

[source]
---------------------------------------------------------------------------------
# app/views/author/new.html.erb
t(".navigation", :default => "humanize.navigation")
---------------------------------------------------------------------------------

* WOW! Really? Should I write it every time like that ?

== Usecase: Single word on view page (@)

* Rails uses "." notation
* So I can have my own, can I?
* "@" was born

[source]
---------------------------------------------------------------------------------
# app/views/books/index.html.erb
t("@navigation")
# == t(".navigation", :default => "humanize.navigation")
---------------------------------------------------------------------------------

* Can be changed per single page
* Still has sensible default

== Usecase: Single word on view page (Plural)

[source]
---------------------------------------------------------------------------------
# app/views/books/index.html.erb
# t(".actions", :default => "humanize.actions") # BAD
t(".action", :default => "humanize.action", :count => 2)
---------------------------------------------------------------------------------

[source]
---------------------------------------------------------------------------------
# app/views/author/new.html.erb
t(".action", :default => "humanize.action", :count => 2)
---------------------------------------------------------------------------------

[source]
---------------------------------------------------------------------------------
pl:
  humanize:
    action:
      one:  "Akcja"
      few:  "Akcje"
      many: "Akcji"
---------------------------------------------------------------------------------

* unknown number of plural items => not all languages use the form that is used when speaking about two obejcts


== Usecase: Single word on view page (sh / ph)

* singular_humanize (sh)
* plural_humanize (ph)

[source]
---------------------------------------------------------------------------------
ph("@action")
# t(".action", :default => "humanize.action", :count => 2)
---------------------------------------------------------------------------------

[source]
---------------------------------------------------------------------------------
sh("@navigation")
# t(".navigation", :default => "humanize.navigation", :count => 1)
---------------------------------------------------------------------------------

* Abstraction for translating 1 word
* Crazy enough ?
* :count => N for different languages


== Usecase: Sentence in a controller

[source]
---------------------------------------------------------------------------------
class PapersController < ApplicationController
  def create
    @paper = Paper.new(params[:paper])

    if @paper.save
      redirect_to @paper, notice: I18n.t(:paper_created_flash_message)
    else
      flash[:alert] = I18n.t(:error_creating_paper)
      render action: :new
    end
  end
end
---------------------------------------------------------------------------------

* no namespacing
* no t() / must use I18n.t
* no "." notation


== Usecase: Sentence in a controller (dot notation)

* include ActionView::Helpers::TagHelper
* include ActionView::Helpers::TranslationHelper
* implement only scope_key_by_partial(key)

[source]
---------------------------------------------------------------------------------
class PapersController < ApplicationController
  def create
    @paper = Paper.new(params[:paper])
    if @paper.save
      redirect_to @paper, notice: t(".sentence.paper_created_flash_message")
    else
      flash[:alert] = t(".sentence.error_creating_paper")
      render action: :new
    end
  end
end
---------------------------------------------------------------------------------

* "sentence" everywhere, problem already solved


== Usecase: Sentence in a controller (most often used) [1]

[source]
---------------------------------------------------------------------------------
module Sentences
  def has_been_created
    flash.notice = ss(:has_been_created)
  end
  def could_not_create
    flash.now.alert = ss(:could_not_create)
  end
  def scoped_sentence(key, options = {})
    t(".sentence.#{key}", options)
  end
  alias_method(:ss, :scoped_sentence)
end
---------------------------------------------------------------------------------


== Usecase: Sentence in a controller (most often used) [2]

[source]
---------------------------------------------------------------------------------
class PapersController < ApplicationController
  def create
    @paper = Paper.new(params[:paper])
    if @paper.save
      has_been_created
      redirect_to @paper
    else
      could_not_create
      render action: :new
    end
  end
end
---------------------------------------------------------------------------------

[source]
---------------------------------------------------------------------------------
pl:  
  papers:
    sentence:
      has_been_created:   "Zgłosiłeś się na konferencję"
      could_not_create:   "Nie tym razem"
---------------------------------------------------------------------------------

* Ordnung !

== I got smarter in the meantime

* "Communication between controllers and views via symbol messages"
* http://blog.robert.pankowecki.pl/2011/12/communication-between-controllers-and.html
* Don't generate any kind of messages, ui parts in controller
* Rails-way (repeated hundred times in every tutorial) is WRONG!

== Usecase: Model name

* example

[source]
---------------------------------------------------------------------------------
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                    %                                   %
%    Post                            %          Author                   %
%                                    %                                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 %                  %                   %               %
%   Topic         %  Created at      %  Nick             % Last name     %
%                 %                  %                   %               %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Cooking        % Yesterday        % rupert            % Pankowecki   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Dancing        % Today            % rupert            % Pankowecki   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
---------------------------------------------------------------------------------

== Usecase: Model name (Rails way)

* Author.model_name.human

[source]
---------------------------------------------------------------------------------
pl:
  activerecord:
    models:
      author: Autor
---------------------------------------------------------------------------------


== Usecase: Model name (My way)

* Author.model_name.human

[source]
---------------------------------------------------------------------------------
pl:
  activerecord:
    models:
      author: Autor # first
  humanize:
    author: Autor   # second => sensible default
---------------------------------------------------------------------------------

== Usecase: column name

* forms
* tables

[source]
---------------------------------------------------------------------------------
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                    %                                   %
%    Post                            %          Author                   %
%                                    %                                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 %                  %                   %               %
%   Topic         %  Created at      %  Nick             % Last name     %
%                 %                  %                   %               %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Cooking        % Yesterday        % rupert            % Pankowecki   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Dancing        % Today            % rupert            % Pankowecki   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
---------------------------------------------------------------------------------


== Usecase: column name

* human_attribute_name

[source]
---------------------------------------------------------------------------------
# Rails evaluation for Comment.human_attribute_name(:author) :
#
# :"activerecord.attributes.comments.author"
# :"attributes.author",
# "Author"
#
# vs:
#
# :"activerecord.attributes.comments.author"
# :"attributes.author",
# :"humanize.author",
# "Author"
#
def human_attribute_name(attribute, options = {})
end
---------------------------------------------------------------------------------

== So far so good

* Comment.human_attribute_name(:author)
* Author.model_name.human
* Simple and consistent

[source]
---------------------------------------------------------------------------------
pl:
  humanize:
    author: Autor   # sensible default
---------------------------------------------------------------------------------

== Usecase: column value 

[source]
---------------------------------------------------------------------------------
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                    %                                   %
%    Post                            %          Author                   %
%                                    %                                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 %                  %                   %               %
%   Topic         %  Status          %  Nick             % Last name     %
%                 %                  %                   %               %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Cooking        % Published        % rupert            % Pankowecki   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Dancing        % Scheduled        % rupert            % Pankowecki   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
---------------------------------------------------------------------------------


== Usecase: column value

* no such thing in rails
* most used in translating state machine values
* on tables list
* form filters based on state

[source]
---------------------------------------------------------------------------------
# Post.human_attribute_value_name(:status, :published)
# Post.human_attribute_value_name(:status, post.status) 
# => "Opublikowany"
#
# :"activerecord.values.post.status.published"
# :"values.status.published",
# :"humanize.published",
# "Published"
#
def human_attribute_value_name(attribute, value, options = {})
end
---------------------------------------------------------------------------------


== Usecase: action name [1]

* button names (Create / Update)
* links for actions (New / Edit)
* action_by_model (next slide)

[source]
---------------------------------------------------------------------------------
# Post.human_action_name(:publish) # => "Opublikuj"
#
# :"activerecord.actions.post.publish"
# :"actions.publish",
# :"humanize.publish",
# "Publish"
#
def human_action_name(action, options = {})
end
---------------------------------------------------------------------------------


== Usecase: action name [2]

* Extreme customization for customers!
* Mostly just fallbacks to human_action_name (previous slide)

[source]
---------------------------------------------------------------------------------
 def action(model, a)
    model = model.class unless model.is_a?(Class)
    action_by_site_and_model(model, a) ||
    action_by_site(a) ||
    action_by_controller_and_model(model, a) ||
    action_by_controller(a) ||
    action_by_model(model, a)
  end
end
---------------------------------------------------------------------------------


== Usecase: action name [2]

[source]
---------------------------------------------------------------------------------
# single item
action(post, :edit)
action(post, :destroy)

# collection
action(Post, :index)
action(Post, :new)
---------------------------------------------------------------------------------


== Usecase: action name [3]

[source]
---------------------------------------------------------------------------------
posts.each do |post|
  link_to action(post, :edit),    edit_post_path(post)
  link_to action(post, :destroy), post_path(post), :method => :delete
end

link_to action(Post, :new), new_post_path
---------------------------------------------------------------------------------


== Usecase: action name (formtastic integration) [1]

[source]
---------------------------------------------------------------------------------
<%= semantic_form_for(@post) do |f| %>
  <%= f.inputs do %>
    <%= f.input :title %>
    <%= f.input :body %>
  <% end %>

  <%= f.named_button(:publish) %>  # action(post, :publish)
                                   # Post.human_action_name(:publish)
  <%= f.named_button(:schedule) %>
<% end %>
---------------------------------------------------------------------------------


== Usecase: action name (formtastic integration) [2]

[source]
---------------------------------------------------------------------------------
<%= semantic_form_for(@post) do |f| %>
  <%= f.inputs do %>
    <%= f.input :title %>
    <%= f.input :body %>
  <% end %>

  <%= f.buttons %> # :create / :update / :submit based on persistance
                   # Post.human_action_name(:create)
<% end %>
---------------------------------------------------------------------------------


== Will it work ?

=== Disaster
* refactoring is nightmare
* moving view files around, changing namespace, renaming
* breaks every translation != humanize.*
* hard to determine file to change/fix translation (lot of rules)
* what's translated and what is not ?

== That bad ?

=== Good parts

* almost everything was de facto translated based on model
* humanize.* is cool (not sure why no such thing rails by default)
* humanize.* unused in Polish language when different gramaticall gender

[source,text]
---------------------------------------------------------------------------------
pl:
  humanize:
    new: Nowy
  activerecord:
   actions:
     book:
       new: Nowa
---------------------------------------------------------------------------------

== Conclusion ?
=== Part 1
* never go for the "." notation in views
* don't try to mimick it in controllers
* separate code/view namespacing from translations namespacing, the later won't break when chaning the further

[source]
---------------------------------------------------------------------------------
t("admin.sentence.could_not_obay_your_will_lord") 
# admin translation namespace handwritten

plural_humanize("person", "action") => 
I18n.t("person.humanize.action", :default => "humanize.action", :count => 2)
---------------------------------------------------------------------------------


== Conclusion ?
=== Part 2
* make human_attribute_name smarter

[source]
---------------------------------------------------------------------------------
Post.human_attribute_name(:comments) =>
#should use reflection to find has_many :comments association class and use
Comment.model_name.human(:count => 2)
---------------------------------------------------------------------------------

[source]
---------------------------------------------------------------------------------
Comment.human_attribute_name(:author) =>
#should use reflection to find belongs_to :author association class and use
Author.model_name.human(:count => 1)
---------------------------------------------------------------------------------


== Conclusion ?
=== Part 3
* using english words as keys for translation might be problematic without meta information
[source]
---------------------------------------------------------------------------------
# Fastgettext
_("New")
#vs
_("Book|New")
---------------------------------------------------------------------------------


== Conclusion ?
=== Part 4
* way easier with 1 customer - 1 deploy scenario
* best practices ?
* fastgettext ?

== Fastgettext
* english in source code?
* english to english translation ?

=== pluralization
[source]
---------------------------------------------------------------------------------
#translate pluralized
# some languages have up to 4 plural forms...
# n_(singular, plural, plural form 2, ..., count)
# n_('apple','apples',3)
def n_(*keys)
end
---------------------------------------------------------------------------------

== Fastgettext
=== errors

[source]
---------------------------------------------------------------------------------
# Option A:
# Define a translation for "I need my rating!" and use it as message.
validates_inclusion_of :rating, :in=>1..5, :message=>N('I need my rating!')

#Option B:
validates_inclusion_of :rating, :in=>1..5
#Make a translation for the I18n key:
#activerecord.errors.models.rating.attributes.rating.inclusion

#Option C:
#
#Add a translation to each config/locales/*.yml files 
#en: activerecord: errors: models: rating: attributes: rating: inclusion: " -- please choose!" 
---------------------------------------------------------------------------------
